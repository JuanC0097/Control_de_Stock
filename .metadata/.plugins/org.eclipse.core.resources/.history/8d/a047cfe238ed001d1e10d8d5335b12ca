package com.alura.jdbc.controller;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

import com.alura.jdbc.dao.ProductoDAO;
import com.alura.jdbc.factory.ConnectionFactory;
import com.alura.jdbc.modelo.Producto;


public class ProductoController {

	public int modificar(String nombre, String descripcion, Integer cantidad, Integer id) throws SQLException {
		ConnectionFactory factory = new ConnectionFactory();
		final Connection con = factory.recuperarConexion();
		try(con){
			
		   final PreparedStatement statement = con.prepareStatement("UPDATE PRODUCTO SET " 
				+ " NOMBRE = ?"
				+ ", DESCRIPCION = ?"
				+ ", CANTIDAD = ?"
				+ " WHERE ID = ?");
		   
		   try(statement){
				statement.setString(1, nombre);
				statement.setString(2, descripcion);
				statement.setInt(3, cantidad);
				statement.setInt(4, id);
				
				statement.execute();
				
				int updateCount = statement.getUpdateCount();
				
				return  updateCount;
		   	}
		}	 
	}

	
	/*
	 * 1.Utilizamos throws para informar de SQLEcepcion, sera tratada despues.
	 * 2.Creara una nueva conexion y traera el metodo recuperarConexion
	 * 3.Se crea un nuevo objeto Statement
	 * 4.Se llama al metodo execute de Statement y se agregan las acciones que realizara,en 
	 *   este caso DELETE
	 * 5.El metodo execute devuelte un valor booleano True si el resultado de la query es un 
	 *   result.set'Listado' o False si no es un resultset.
	 * 6. el metodo de Statement.getUpdateCount, nos permite conocer el numero de filas modificadas
	 *    luego de ejecutar el comando sql en el Statement, devuelve int.
	 * 7. retornamos este valor desde la aplicacion
	 *  
	 */
	public int eliminar(Integer id) throws SQLException {
		ConnectionFactory factory = new ConnectionFactory();
		final Connection con = factory.recuperarConexion();
		
		
		try(con){
			 
			final PreparedStatement statement = con.prepareStatement("DELETE FROM PRODUCTO WHERE ID = ?");
			try(statement){ 
				statement.setInt(1, id);
				statement.execute();
				
				int updateCount = statement.getUpdateCount();
				
				return  updateCount;
			}
		}
	}

	
	public List<Map<String, String>> listar() throws SQLException {
		ConnectionFactory factory = new ConnectionFactory();
		final Connection con = factory.recuperarConexion();
		
		try(con){
			//Statement= comandos de SQl
			final PreparedStatement statement = con.prepareStatement("SELECT ID,NOMBRE, DESCRIPCION, CANTIDAD FROM PRODUCTO");
			
			try(statement){
				statement.execute();
				
				ResultSet resultSet = statement.getResultSet();
				
				List<Map<String, String>> resultado = new ArrayList<>();
				
				
				
				//leer el contenido y agregar a un listado de resultado y devolverlo a la app
				while (resultSet.next()) {
					Map<String, String> fila = new HashMap<>();
					fila.put("ID", String.valueOf(resultSet.getInt("ID")));
					fila.put("NOMBRE", resultSet.getString("NOMBRE"));
					fila.put("DESCRIPCION", resultSet.getString("DESCRIPCION"));
					fila.put("CANTIDAD", resultSet.getString("CANTIDAD"));
					
					resultado.add(fila);
				}
				
				return resultado;
			}
		}
		
	}


	/*
	 * Recibe como parametro un producto
	 * 1.Crea un nuevo objeto conexion 
	 * 2.Guarda el producto dentro del nuevo objeto conexion
	 */
    public void guardar(Producto producto) throws SQLException {

    	ProductoDAO persistenciaProducto = new ProductoDAO(new ConnectionFactory().recuperarConexion());
    	persistenciaProducto.guardarProducto(producto);
	}


}
